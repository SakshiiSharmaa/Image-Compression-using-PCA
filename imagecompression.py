# -*- coding: utf-8 -*-
"""ImageCompression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E_IoWSSu9BMifmulJ6za3AoRK3_L6BgP
"""

# Mount google drive with google colab
from google.colab import drive
drive.mount('/content/drive')
import os
os.chdir('/content/drive/My Drive/Colab Notebooks')

"""Click portraits of yourself and one other family member.  Convert each image to grayscale.  Using the pixel matrix for each image and compute the principal components.  Plot the image by retaining 5% 10% 20% 30% 40% of the principal components.  Plot the eigenvalues of the principal components and decide from the plot the minimum number of principal components that will yield a good quality image.  Note the size of the image and the extent of compression.  Write a report (3 images/page)  showing the original images and the plotted images.  For each plotted image give your observations.  Note that the credit will be given to the quality of observations."""

# importing required libraries
import matplotlib.pyplot as plt
from scipy.linalg import eigh
import numpy as np
from PIL import Image

def getImage(filename):
  # Open the Image
  rgb_img=Image.open(filename)
  print('Image Size : ',rgb_img.size)

  # Plotting both RGB and Grayscaled Image 
  fig,[img1,img2] = plt.subplots(1,2,figsize=(12,10))

  img1.imshow(rgb_img)
  img1.axis('off')
  img1.set_title("RGB Image")

  gray_img=rgb_img.convert('LA')
  img2.imshow(gray_img)
  img2.axis('off')
  img2.set_title("Grayscaled Image ")

  # returning grayscaled image
  return gray_img

def getMatrix(gray_img):

  #convert to numpy array
  gray_mat=np.array(list(gray_img.getdata(band=0)),float)

  # Reshape according to orginal image dimensions
  # width(index 0) and height(index 1)
  gray_mat.shape=(gray_img.size[1],gray_img.size[0])

  # Display image 
  plt.figure(figsize=(8,6))
  print('Matrix Shape : ',gray_mat.shape)
  plt.imshow(gray_mat,cmap='gray')
  plt.axis('off')
  plt.title("Grayscaled Image using Matrix")
  plt.show()


  return gray_mat

def pca(img_mat):

  # Centered image matrix
  centered_mat = img_mat - np.mean(img_mat,axis=0)

  # Covariance matrix
  cov_mat=np.cov(centered_mat,rowvar = False)

  print("Shape of covariance matrix : ",cov_mat.shape)
  print("Shape of np.mean", np.mean(img_mat,axis=0).shape)

  # Compute eigen values and eigen vector for the sample
  eig_val,eig_vec=np.linalg.eigh(cov_mat) 

  # Size of eigen vector
  eig_vec_dim=np.size(eig_vec,axis=0)

  # Sort eigen values
  idx=np.argsort(eig_val)
  idx=idx[::-1]
 
  # Choosing eigen vector coresponding to order of eigen value
  eig_vec=eig_vec[:,idx]
  eig_val=eig_val[idx]

  return eig_val,eig_vec,cov_mat,centered_mat

def plot_explained_variance_ratio(eig_val):
  variance_ratio = eig_val/np.sum(eig_val)
  print(variance_ratio.round(3)[:50] * 100)
  plt.plot(variance_ratio.round(3)[:50] * 100)
  plt.ylabel('Variance explained(%)')
  plt.xlabel('Principal components')
  plt.show()

def plot_explained_cumulative_variance_ratio(eig_val):
  cumulative_variance_ratio=np.cumsum(eig_val)/np.sum(eig_val)
  print(cumulative_variance_ratio.round(3)[:50]*100)
  plt.plot(cumulative_variance_ratio.round(3)[:50]*100)
  plt.ylabel('Cumulative variance explained(%)')
  plt.xlabel('Number of principal components ')
  plt.show()

def compress_img(img_mat,value,eig_val,eig_vec,centered_mat):
  total_dim = img_mat.shape[1];
  required_dim = int(value / 100 * total_dim)
  
  if required_dim < total_dim or required_dim > 0 :
    eig_vec=eig_vec[:,range(required_dim)]

  print("\nShape of standard matrix : ",centered_mat.shape)
  print("Shape of eigen matrix for "+str(value)+"% components: ",eig_vec.shape)
  

  # Reconstruct the image using dot product of eigen vector and covariance matrix
  score=np.dot(centered_mat,eig_vec)
  compressed_img=np.dot(score,eig_vec.T) + np.mean(img_mat,axis=0) #normalisation can be used to make img quality better
  
  return compressed_img

gray_img=getImage("Sakshi.jpeg")

img_mat=getMatrix(gray_img)

eig_val,eig_vec,cov_mat,centered_mat=pca(img_mat)
# Plot between explained variance and PCs 
plot_explained_variance_ratio(eig_val)
#eig_vec.shape,eig_val.shape,cov_mat.shape,centered_mat.shape

# Plot between cummulative variance and number of PCs
plot_explained_cumulative_variance_ratio(eig_val)

# 1% 3% 5% 10% 20% 30% 40%
img1=compress_img(img_mat,1,eig_val,eig_vec,centered_mat)
img2=compress_img(img_mat,3,eig_val,eig_vec,centered_mat)
img3=compress_img(img_mat,5,eig_val,eig_vec,centered_mat)
img4=compress_img(img_mat,10,eig_val,eig_vec,centered_mat)
img5=compress_img(img_mat,20,eig_val,eig_vec,centered_mat)
img6=compress_img(img_mat,30,eig_val,eig_vec,centered_mat)
img7=compress_img(img_mat,40,eig_val,eig_vec,centered_mat)

fig, [ax0,ax1] = plt.subplots(1,2,figsize=(12,10))

ax0.axis('off')
ax0.imshow(img_mat,cmap=plt.get_cmap('gray'))
ax0.set_title('actual image')

#ax0.text(0,0,"Image size : "+str(img_mat.shape),size='xx-large',va='bottom')
ax1.axis('off')
ax1.imshow(img1,cmap=plt.get_cmap('gray'))
ax1.set_title('1% components')

plt.show()

fig, [ax0,ax2] = plt.subplots(1,2,figsize=(12,10))

ax0.axis('off')
ax0.imshow(img_mat,cmap=plt.get_cmap('gray'))
ax0.set_title('actual image')

ax2.axis('off')
ax2.imshow(img2,cmap=plt.get_cmap('gray'))
ax2.set_title(' 3% components')

plt.show()

fig, [ax0,ax3] = plt.subplots(1,2,figsize=(12,10))

ax0.axis('off')
ax0.imshow(img_mat,cmap=plt.get_cmap('gray'))
ax0.set_title('actual image')

ax3.axis('off')
ax3.imshow(img3,cmap=plt.get_cmap('gray'))
ax3.set_title(' 5% components')

plt.show()

fig, [ax0,ax4] = plt.subplots(1,2,figsize=(12,10))

ax0.axis('off')
ax0.imshow(img_mat,cmap=plt.get_cmap('gray'))
ax0.set_title('actual image')

ax4.axis('off')
ax4.imshow(img4,cmap=plt.get_cmap('gray'))
ax4.set_title(' 10% components')

plt.show()

fig, [ax0,ax5] = plt.subplots(1,2,figsize=(12,10))

ax0.axis('off')
ax0.imshow(img_mat,cmap=plt.get_cmap('gray'))
ax0.set_title('actual image')

ax5.axis('off')
ax5.imshow(img5,cmap=plt.get_cmap('gray'))
ax5.set_title(' 20% components')

plt.show()

fig, [ax0,ax6] = plt.subplots(1,2,figsize=(12,10))

ax0.axis('off')
ax0.imshow(img_mat,cmap=plt.get_cmap('gray'))
ax0.set_title('actual image')

ax6.axis('off')
ax6.imshow(img6,cmap=plt.get_cmap('gray'))
ax6.set_title(' 30% components')

plt.show()

fig, [ax0,ax7] = plt.subplots(1,2,figsize=(12,10))

ax0.axis('off')
ax0.imshow(img_mat,cmap=plt.get_cmap('gray'))
ax0.set_title('actual image')

ax7.axis('off')
ax7.imshow(img7,cmap=plt.get_cmap('gray'))
ax7.set_title(' 40% components')

plt.show()